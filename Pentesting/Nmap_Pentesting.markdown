# Using Nmap for Penetration Testing

This guide provides a detailed, step-by-step approach to using Nmap (Network Mapper) for penetration testing, focusing on mapping a company’s network structure. Nmap is a powerful, open-source tool for network discovery and security auditing, widely used by pentesters to identify live hosts, open ports, running services, operating systems, and potential vulnerabilities. **Important Note:** Penetration testing must only be conducted with explicit written permission from the organization or individual owning the target systems. Unauthorized scanning is illegal and can result in severe penalties. Always ensure you have the necessary legal authorization before proceeding.

## Table of Contents
1. [Introduction to Nmap](#introduction-to-nmap)
2. [Setting Up Nmap](#setting-up-nmap)
3. [Host Discovery](#host-discovery)
4. [Port Scanning](#port-scanning)
5. [Service and Version Detection](#service-and-version-detection)
6. [Operating System Detection](#operating-system-detection)
7. [Vulnerability Scanning](#vulnerability-scanning)
8. [Advanced Scanning Techniques](#advanced-scanning-techniques)
9. [Documenting Findings](#documenting-findings)
10. [Best Practices](#best-practices)
11. [Example Workflow](#example-workflow)
12. [Citations](#citations)

## Introduction to Nmap
Nmap (Network Mapper) is a free, open-source tool designed for network discovery and security auditing. It is highly effective for mapping networks, identifying live hosts, detecting open ports, enumerating services, and performing basic vulnerability scans. Version 7.97, released on May 12, 2025, includes significant updates such as:
- 336 new OS detection signatures, covering iOS 15 & 16, macOS Ventura & Monterey, Linux 6.1, and OpenBSD 7.1.
- Over 2,500 new service/version detection fingerprints, supporting protocols like grpc, mysqlx, and tuya.
- Four new NSE scripts for industrial control systems (hartip-info, iec104-info, iec104-scanner, s7-info).
- Upgraded Npcap to version 1.79 for Windows, improving performance.

These updates enhance Nmap’s accuracy and efficiency, making it a cornerstone tool for penetration testers in 2025. This guide focuses on practical Nmap commands for external and internal network reconnaissance, tailored for pentesting scenarios.

## Setting Up Nmap
Nmap is pre-installed on Kali Linux. To verify the version:
```bash
nmap --version
```
Ensure you’re using version 7.97 or later. If not, update Nmap:
```bash
sudo apt update && sudo apt install nmap
```
For Windows or macOS, download the latest installer from [nmap.org/download](https://nmap.org/download). On Windows, ensure Npcap 1.79 is installed for raw packet functionality.

## Host Discovery
Host discovery identifies active devices on a network, a critical first step in pentesting to map the network’s scope.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `nmap -sn 192.168.1.0/24` | Performs a ping scan to identify live hosts without port scanning. | `nmap -sn 192.168.1.0/24` | List of live hosts with IP and MAC addresses (e.g., 192.168.1.100, 192.168.1.101). |
| `nmap -sL 192.168.1.0/24` | Lists all hosts in the range without sending packets (no interaction). | `nmap -sL 192.168.1.0/24` | List of IPs in the range, useful for planning. |
| `nmap -PS 192.168.1.0/24` | Sends TCP SYN packets to port 80 (default) to detect live hosts. | `nmap -PS 192.168.1.0/24` | List of hosts responding to TCP SYN on port 80. |
| `nmap -PA 192.168.1.0/24` | Sends TCP ACK packets to detect live hosts. | `nmap -PA 192.168.1.0/24` | List of hosts responding to TCP ACK. |
| `nmap -PU 192.168.1.0/24` | Sends UDP packets to detect live hosts. | `nmap -PU 192.168.1.0/24` | List of hosts responding to UDP probes. |

**Tip**: Use `-sn` for quick scans or `-PS` when ICMP is blocked by firewalls.

## Port Scanning
Port scanning identifies open ports on target hosts, revealing potential services and entry points.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `nmap -sS 192.168.1.100` | Performs a stealth SYN scan to identify open ports without completing connections. | `nmap -sS 192.168.1.100` | List of open ports (e.g., 80, 443). |
| `nmap -sT 192.168.1.100` | Performs a TCP connect scan, establishing full connections. | `nmap -sT 192.168.1.100` | List of open ports, more reliable but less stealthy. |
| `nmap -sU 192.168.1.100` | Scans for open UDP ports. | `nmap -sU 192.168.1.100` | List of open UDP ports (e.g., 53, 161). |
| `nmap -p 1-65535 192.168.1.100` | Scans all ports (1–65535) on the target. | `nmap -p 1-65535 192.168.1.100` | Comprehensive list of open ports. |
| `nmap -F 192.168.1.100` | Performs a fast scan of the top 100 ports. | `nmap -F 192.168.1.100` | List of open ports among the most common 100. |

**Note**: UDP scans (`-sU`) are slower due to the lack of handshake in UDP protocols. Use `-p` to specify ports (e.g., `-p 80,443`) for targeted scans.

## Service and Version Detection
Service detection identifies the software and versions running on open ports, critical for finding outdated or vulnerable services.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `nmap -sV 192.168.1.100` | Detects service versions on open ports. | `nmap -sV 192.168.1.100` | Service details (e.g., Apache 2.4.7, OpenSSH 7.6). |
| `nmap --script=default 192.168.1.100` | Runs default NSE scripts for service enumeration and basic checks. | `nmap --script=default 192.168.1.100` | Detailed service info and script outputs (e.g., banner grabs). |
| `nmap -sV --version-intensity 9 192.168.1.100` | Uses maximum intensity for version detection. | `nmap -sV --version-intensity 9 192.168.1.100` | More precise service version details. |

**Tip**: Combine `-sV` with `-sS` for stealthy service detection (e.g., `nmap -sS -sV 192.168.1.100`).

## Operating System Detection
OS detection helps identify the target’s operating system, aiding in exploit selection.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `nmap -O 192.168.1.100` | Fingerprints the operating system and version. | `nmap -O 192.168.1.100` | OS details (e.g., Linux 4.x, Windows Server 2019). |
| `nmap -O --osscan-guess 192.168.1.100` | Makes aggressive guesses for OS detection. | `nmap -O --osscan-guess 192.168.1.100` | Best guess for OS if detection is uncertain. |

**Note**: OS detection requires root privileges (`sudo`) and may not always be accurate due to firewall interference.

## Vulnerability Scanning
Nmap’s NSE (Nmap Scripting Engine) can detect common vulnerabilities, though it’s not a full-fledged vulnerability scanner.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `nmap --script vuln 192.168.1.100` | Runs all vulnerability detection scripts. | `nmap --script vuln 192.168.1.100` | List of detected vulnerabilities (e.g., outdated software). |
| `nmap --script http-vuln* 192.168.1.100` | Runs HTTP-specific vulnerability scripts. | `nmap --script http-vuln* 192.168.1.100` | HTTP-related vulnerabilities (e.g., XSS, misconfigurations). |
| `nmap --script hartip-info 192.168.1.100` | Queries industrial control systems using the HART-IP protocol (new in 7.97). | `nmap --script hartip-info 192.168.1.100` | Device info for HART-IP-enabled systems. |

**Tip**: Use specific script categories (e.g., `http-vuln*`, `smb-vuln*`) to target known services.

## Advanced Scanning Techniques
Advanced techniques help bypass firewalls, reduce detectability, or handle complex scenarios.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `nmap -T4 192.168.1.0/24` | Adjusts scan speed (T0–T5, T4 is aggressive). | `nmap -T4 192.168.1.0/24` | Faster scan results, less stealthy. |
| `nmap -D decoy1,decoy2 192.168.1.100` | Uses decoy IPs to obscure the scan source. | `nmap -D 10.0.0.1,10.0.0.2 -sS 192.168.1.100` | Scan appears to come from multiple IPs. |
| `nmap -S 10.0.0.1 -e eth0 192.168.1.100` | Spoofs the source IP address. | `nmap -S 10.0.0.1 -e eth0 -sS 192.168.1.100` | Scan with spoofed source IP. |
| `nmap -f 192.168.1.100` | Fragments packets to evade firewalls. | `nmap -f 192.168.1.100` | Scan results with fragmented packets. |
| `nmap --source-port 53 192.168.1.100` | Uses a specific source port (e.g., 53) to bypass firewalls. | `nmap --source-port 53 192.168.1.100` | Scan results using DNS port as source. |

**Note**: Spoofing (`-S`) and decoy scans (`-D`) require careful configuration and permission to avoid legal issues.

## Documenting Findings
Proper documentation is essential for reporting findings to clients.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `nmap -oN output.txt 192.168.1.100` | Saves scan results in normal text format. | `nmap -oN output.txt 192.168.1.100` | Text file with scan results. |
| `nmap -oX output.xml 192.168.1.100` | Saves results in XML for tool integration. | `nmap -oX output.xml 192.168.1.100` | XML file for use with Metasploit or other tools. |
| `nmap -oA output 192.168.1.100` | Saves results in all formats (normal, XML, grepable). | `nmap -oA output 192.168.1.100` | Multiple files (output.nmap, output.xml, output.gnmap). |

**Tip**: Use `keepnote` or a text editor like `nano` to organize findings, including screenshots and logs.

## Best Practices
- **Legal Authorization**: Obtain explicit written permission (e.g., a signed contract) before scanning. Unauthorized scanning is illegal and can lead to severe consequences.
- **Stealth**: Use stealthy options (e.g., `-sS` for SYN scans, `-T2` for slower timing) to minimize detection by intrusion detection systems.
- **Segment Scans**: Divide large networks into smaller subnets (e.g., 192.168.1.0/26) to manage scan times and reduce network impact.
- **Verify Findings**: Cross-check results with other tools (e.g., `masscan`, `netcat`) for accuracy.
- **Prioritize Issues**: Focus on high-impact findings, such as open ports with outdated services or critical vulnerabilities.
- **Maintain Anonymity**: Use VPNs or Tor during external scans (if permitted) to mask your IP address.
- **Combine Tools**: Feed Nmap results into tools like Metasploit or Nessus for deeper analysis.
- **Stay Updated**: Regularly update Nmap to leverage new signatures and scripts (e.g., version 7.97’s industrial control system scripts).

## Example Workflow
1. **Host Discovery**: Run `nmap -sn 192.168.1.0/24` to identify live hosts (e.g., 192.168.1.100, 192.168.1.101).
2. **Port Scanning**: Use `nmap -sS -p 1-1000 192.168.1.100` to find open ports (e.g., 80, 443).
3. **Service Detection**: Run `nmap -sV --script=default 192.168.1.100` to identify services (e.g., Apache 2.4.7 on port 80).
4. **OS Detection**: Use `nmap -O 192.168.1.100` to detect the OS (e.g., Linux 4.x).
5. **Vulnerability Scanning**: Run `nmap --script vuln 192.168.1.100` to check for vulnerabilities.
6. **Documentation**: Save results with `nmap -oA scan_results 192.168.1.100` and organize in `keepnote`.

**Scenario Example**: You’re pentesting ExampleCorp’s network. You discover a live host at 192.168.1.100 with open ports 80 (HTTP) and 22 (SSH). Service detection reveals an outdated Apache version, and vulnerability scanning identifies a known exploit. You document these findings in an XML file for further analysis with Metasploit.

## Citations
- [Nmap Official Website](https://nmap.org/)
- [Nmap Changelog](https://nmap.org/changelog.html)
- [Nmap Download Page](https://nmap.org/download)
- [Nmap Book: Installation Guide](https://nmap.org/book/install.html)
- [Nmap Wikipedia Page](https://en.wikipedia.org/wiki/Nmap)
- [Nmap 7.96 Release Notes](https://cybersecuritynews.com/nmap-7-96-released/)


-pk