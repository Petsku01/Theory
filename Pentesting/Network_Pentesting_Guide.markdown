# Kali Linux Commands for Network Penetration Testing and Mapping

This comprehensive guide outlines Kali Linux commands and tools for mapping a company’s network structure during penetration testing. It covers external (outside the network) and internal (inside the network) reconnaissance, with a dedicated section on mobile network reconnaissance to address the role of mobile devices in network security. The guide is designed for penetration testers to systematically gather information about network architecture, devices, services, and Active Directory environments. **Important Note:** Penetration testing must only be conducted with explicit written permission from the organization or individual owning the target systems. Unauthorized testing is illegal and can result in severe penalties. Always ensure you have the necessary legal authorization before proceeding.

## Table of Contents
1. [External Network Reconnaissance](#external-network-reconnaissance)
   - [Domain and DNS Information](#domain-and-dns-information)
   - [Public Data Collection](#public-data-collection)
   - [Network Scanning](#network-scanning)
   - [Service Enumeration](#service-enumeration)
   - [Advanced Scanning Techniques](#advanced-scanning-techniques)
2. [Internal Network Reconnaissance](#internal-network-reconnaissance)
   - [Host Discovery](#host-discovery)
   - [Network Traffic Analysis](#network-traffic-analysis)
   - [Service Enumeration (Internal)](#service-enumeration-internal)
   - [Active Directory Reconnaissance with BloodHound CE](#active-directory-reconnaissance-with-bloodhound-ce)
3. [General Network Commands](#general-network-commands)
4. [Vulnerability Scanning](#vulnerability-scanning)
5. [Wireless Network Reconnaissance](#wireless-network-reconnaissance)
   - [Wi-Fi Network Discovery](#wi-fi-network-discovery)
   - [Bluetooth Reconnaissance](#bluetooth-reconnaissance)
6. [Mobile Network Reconnaissance](#mobile-network-reconnaissance)
7. [Documenting Findings](#documenting-findings)
8. [Best Practices](#best-practices)
9. [Example Workflow](#example-workflow)
10. [Citations](#citations)

## External Network Reconnaissance

External reconnaissance involves gathering information about the target network from outside its perimeter, using passive methods (no direct interaction) and active methods (direct scanning, with permission).

### Domain and DNS Information
These tools collect domain details, subdomains, and associated hosts without directly interacting with the target network, ideal for initial reconnaissance.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `whois example.com` | Retrieves domain registration details (registrar, name servers, contact info). | `whois example.com` | Domain registrar, registration dates, and contact details. |
| `dnsenum example.com` | Discovers DNS records (MX, NS, A) to identify hosts and subdomains. | `dnsenum example.com` | List of subdomains, mail servers, and IP addresses. |
| `theharvester -d example.com -b all` | Collects emails, subdomains, and hosts from public sources (Google, Bing, etc.). | `theharvester -d example.com -b all` | Emails, subdomains, and hosts found in public databases. |
| `dig example.com` | Queries DNS servers for domain information (e.g., A, MX, NS records). | `dig example.com ANY` | DNS records including A, MX, and NS entries. |

**Note**: Passive tools like `theharvester` minimize detection risk by relying on public data sources.

### Public Data Collection
These tools gather publicly available information about internet-exposed assets, helping identify potential entry points, including those related to mobile devices.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `shodan host 192.168.1.100` | Retrieves information about a specific public IP from Shodan’s database (requires API key). | `shodan host 192.168.1.100` | Open ports, services, and device info for public IPs, including mobile devices. |
| `recon-ng` | A modular web reconnaissance framework for gathering open-source intelligence (OSINT). | ```bash<br>recon-ng<br>use modules/osint/search/google_site_web<br>set SITE example.com<br>run<br>``` | Web pages and subdomains associated with example.com. |

**Tip**: Use `shodan` to identify mobile devices or IoT devices exposed to the internet, such as corporate mobile endpoints.

### Network Scanning
Active scanning identifies live hosts, open ports, and running services. These actions are detectable, so ensure you have permission.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `nmap -sn 192.168.1.0/24` | Performs a ping sweep to identify live hosts on a network. | `nmap -sn 192.168.1.0/24` | List of live hosts with IP and MAC addresses. |
| `nmap -sS -p- 192.168.1.100` | Conducts a stealth SYN scan to find open ports on a host. | `nmap -sS -p- 192.168.1.100` | List of open ports (e.g., 80, 443). |
| `nmap -sV -O 192.168.1.100` | Identifies service versions and operating systems. | `nmap -sV -O 192.168.1.100` | Service versions (e.g., Apache 2.4.7) and OS details (e.g., Linux 4.x). |
| `nmap -A 192.168.1.100` | Performs an aggressive scan, including OS detection, service enumeration, and NSE scripts. | `nmap -A 192.168.1.100` | Detailed report with OS, services, and potential vulnerabilities. |
| `masscan 192.168.1.0/24 -p1-65535 --rate=1000` | Fast port scanning for large networks. | `masscan 192.168.1.0/24 -p1-65535 --rate=1000` | List of open ports across the subnet. |

**Note**: Use `-T2` or `-T1` with `nmap` for slower, less detectable scans.

### Service Enumeration
Enumerate services to understand their configurations and potential vulnerabilities.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `enum4linux -a 192.168.1.100` | Extracts user accounts, shares, and policies from SMB services. | `enum4linux -a 192.168.1.100` | SMB users, shares, and domain policies. |
| `snmpwalk -v2c -c public 192.168.1.100` | Retrieves device info if SNMP is enabled with default community strings. | `snmpwalk -v2c -c public 192.168.1.100` | Device details like system name and interfaces. |
| `ftp 192.168.1.100` | Attempts anonymous FTP login to check for accessible files. | `ftp 192.168.1.100` | Access confirmation or file listings if anonymous login is allowed. |
| `gobuster dir -u http://192.168.1.100 -w /usr/share/wordlists/dirb/common.txt` | Finds hidden directories and files on web servers. | `gobuster dir -u http://192.168.1.100 -w /usr/share/wordlists/dirb/common.txt` | Hidden directories (e.g., /admin, /backup). |
| `nikto -h http://192.168.1.100` | Scans for web server vulnerabilities. | `nikto -h http://192.168.1.100` | Web server misconfigurations and vulnerabilities. |

**Tip**: Combine `nmap` results with `gobuster` or `nikto` to focus on specific open ports (e.g., HTTP on port 80).

### Advanced Scanning Techniques
These techniques help bypass firewalls or reduce detectability.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `sudo nmap -sF 192.168.8.100` | Stealth FIN scan to detect closed ports. | `sudo nmap -sF 192.168.8.100` | List of closed ports. |
| `sudo nmap -sA 192.168.8.100` | ACK scan to detect firewall rules. | `sudo nmap -sA 192.168.8.100` | Firewall filtering status (filtered/unfiltered). |
| `sudo nmap -sU 192.168.8.100` | Scans for open UDP ports. | `sudo nmap -sU 192.168.8.100` | List of open UDP ports (e.g., 161, 123). |
| `sudo nmap -sS -S 10.0.0.1 -e eth0 192.168.8.100` | SYN scan with spoofed source IP for anonymity. | `sudo nmap -sS -S 10.0.0.1 -e eth0 192.168.8.100` | Open ports with spoofed source IP. |
| `nc -v 192.168.10.1 5500` | Tests if a specific port is open using netcat. | `nc -v 192.168.10.1 5500` | Connection status (success or failure). |

**Note**: Spoofing IPs (`-S`) requires careful configuration and permission to avoid legal issues.

## Internal Network Reconnaissance

Internal reconnaissance is performed when you have access to the network (e.g., via VPN or physical access). The goal is to map devices, analyze traffic, and enumerate internal services.

### Host Discovery
Identify devices on the local network, including mobile devices connected via Wi-Fi.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `arp-scan --interface=eth0 192.168.1.0/24` | Discovers devices using ARP requests. | `arp-scan --interface=eth0 192.168.1.0/24` | List of devices with IP and MAC addresses. |
| `nmap -sn 192.168.1.0/24` | Identifies live hosts on the internal network. | `nmap -sn 192.168.1.0/24` | List of live hosts with IP and MAC addresses. |

**Tip**: `arp-scan` is faster for local networks but requires root privileges.

### Network Traffic Analysis
Analyze network traffic to understand communication patterns, including those involving mobile devices.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `wireshark &` | Captures and analyzes network packets. | `wireshark &` | Packet capture interface with protocol details. |
| `tcpdump -i eth0` | Captures packets on a specific interface. | `tcpdump -i eth0` | Raw packet data with timestamps and protocols. |
| `ettercap -T -i eth0` | Performs man-in-the-middle attacks to intercept traffic. | `ettercap -T -i eth0` | Captured traffic data (e.g., HTTP requests). |

**Note**: Use capture filters in `wireshark` (e.g., `host 192.168.1.100`) to focus on specific devices, such as mobile endpoints.

### Service Enumeration (Internal)
Enumerate services to identify configurations and potential vulnerabilities.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `smbmap -H 192.168.1.100 -u username -p password` | Enumerates SMB shares and checks permissions. | `smbmap -H 192.168.1.100 -u username -p password` | List of accessible SMB shares and permissions. |
| `sslsplit` | Conducts MITM attacks on SSL/TLS connections (requires setup). | Refer to Kali documentation for usage. | Decrypted SSL/TLS traffic (after setup). |

**Tip**: Test for default credentials or weak permissions on SMB shares, which may be accessible from mobile devices.

### Active Directory Reconnaissance with BloodHound CE
BloodHound CE maps and analyzes Active Directory (AD) environments, identifying potential attack paths by visualizing relationships between AD objects (e.g., users, groups, computers). Mobile devices may interact with AD for authentication in corporate environments.

- **Installation**:
  - BloodHound CE is pre-installed in Kali Linux. Initialize services (PostgreSQL and Neo4j):
    ```bash
    sudo bloodhound-setup
    ```

- **Data Collection**:
  - Use the Python-based ingestor to collect AD data:
    ```bash
    bloodhound-ce-python -u username -p password -d domain
    ```
    Replace `username`, `password`, and `domain` with valid AD credentials. This generates JSON or ZIP files containing AD objects and relationships.

- **Import Data**:
  - Access BloodHound via a web browser (URL provided during setup) and import the collected data.

- **Analysis**:
  - Use the BloodHound interface to visualize AD relationships and identify attack paths, such as overly permissive permissions or misconfigured trusts.

- **Why Use It?**: Essential for internal testing in AD environments, revealing vulnerabilities like excessive privileges or weak group policies that could affect mobile device authentication.
- **Documentation**: [BloodHound CE Documentation](https://bloodhound.readthedocs.io/en/latest/installation/linux.html)

## General Network Commands

These commands provide foundational network information for both external and internal reconnaissance.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `ifconfig` | Displays network interface information (IP, MAC, etc.). | `ifconfig` | Interface details (e.g., eth0: 192.168.1.10). |
| `ip addr show` | Shows IP addresses and network configuration. | `ip addr show` | IP addresses and interface status. |
| `ping -c 4 example.com` | Tests connectivity to a remote host. | `ping -c 4 example.com` | Response times or timeout messages. |
| `netstat -an` | Shows active connections and listening ports. | `netstat -an` | List of open ports and connections. |
| `traceroute example.com` | Traces the route to a destination. | `traceroute example.com` | List of hops to the target. |
| `arp -a` | Displays the ARP table. | `arp -a` | IP-to-MAC address mappings. |
| `dig example.com` | Queries DNS servers for domain information. | `dig example.com` | DNS records (e.g., A, MX). |
| `wget http://192.168.1.100/file` | Downloads files from a server. | `wget http://192.168.1.100/file` | Downloaded file or error message. |

## Vulnerability Scanning

Identify potential vulnerabilities in the network, including those affecting mobile devices.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `openvas-start` | Launches OpenVAS for comprehensive vulnerability scanning. | `openvas-start` | Web interface for configuring scans. |
| `nmap --script vuln 192.168.1.100` | Runs vulnerability-specific NSE scripts. | `nmap --script vuln 192.168.1.100` | List of detected vulnerabilities. |

**Note**: OpenVAS can detect vulnerabilities in mobile device services if they are network-connected.

## Wireless Network Reconnaissance

Wireless networks are critical for mobile devices, which often rely on Wi-Fi or Bluetooth for connectivity. This section covers tools for mapping wireless infrastructure and identifying vulnerabilities.

### Wi-Fi Network Discovery
These tools identify Wi-Fi networks and capture traffic, which is crucial for assessing mobile device connectivity.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `airodump-ng wlan0` | Captures wireless traffic and lists nearby networks (requires monitor mode). | `airodump-ng wlan0` | List of Wi-Fi networks, clients, and signal strength. |
| `airgeddon` | Automated wireless auditing tool with a menu-driven interface. | `airgeddon` | Interactive menu for Wi-Fi attacks, including deauthentication. |

**Tip**: Use `airodump-ng` to capture handshakes from mobile devices connecting to Wi-Fi, which can be analyzed for weak encryption.

### Bluetooth Reconnaissance
Bluetooth is a common communication protocol for mobile devices, making it a potential attack vector.

| **Command** | **Purpose** | **Example** | **Expected Output** |
|-------------|-------------|-------------|---------------------|
| `hcitool scan` | Scans for nearby Bluetooth devices. | `hcitool scan` | List of Bluetooth devices with MAC addresses and names. |
| `bluesnarfer -C <Bluetooth MAC>` | Extracts contact information from a Bluetooth device (requires pairing). | `bluesnarfer -C 00:11:22:33:44:55` | Contact list from the target device (if vulnerable). |

**Note**: Ensure Bluetooth devices are in discoverable mode for `hcitool scan` to detect them. Use with caution, as unauthorized access is illegal.

## Mobile Network Reconnaissance

Mobile devices, such as smartphones and tablets, are integral to modern corporate networks, often connecting via Wi-Fi, Bluetooth, or VPNs. This section focuses on tools and techniques for mapping and testing mobile device interactions with networks.

- **Wi-Fi Network Testing**:
  - **Purpose**: Identify Wi-Fi networks that mobile devices connect to and assess their security.
  - **Command**: `airodump-ng wlan0`
    - **Example**: `airodump-ng wlan0`
    - **Output**: Lists Wi-Fi networks, including SSIDs, channels, and connected clients (e.g., mobile devices).
    - **Use Case**: Identify weak encryption (e.g., WEP, outdated WPA2) that mobile devices may use, making them vulnerable to attacks.
  - **Command**: `airgeddon`
    - **Example**: `airgeddon`
    - **Output**: Interactive menu for performing deauthentication attacks or cracking Wi-Fi passwords.
    - **Use Case**: Test the resilience of Wi-Fi networks against attacks that could disconnect mobile devices.

- **Bluetooth Testing**:
  - **Purpose**: Discover and enumerate Bluetooth-enabled mobile devices on the network.
  - **Command**: `hcitool scan`
    - **Example**: `hcitool scan`
    - **Output**: List of nearby Bluetooth devices with MAC addresses and names (e.g., “iPhone-XYZ”).
    - **Use Case**: Identify mobile devices with Bluetooth enabled, which may be vulnerable to unauthorized access.
  - **Command**: `bluesnarfer -C <Bluetooth MAC>`
    - **Example**: `bluesnarfer -C 00:11:22:33:44:55`
    - **Output**: Contact list or other data from a vulnerable Bluetooth device (if paired).
    - **Use Case**: Test for Bluetooth vulnerabilities, such as weak pairing mechanisms.

- **Mobile Device Fingerprinting**:
  - **Purpose**: Identify mobile devices on the network by their OS or service signatures.
  - **Command**: `nmap -sV --script=banner 192.168.1.0/24`
    - **Example**: `nmap -sV --script=banner 192.168.1.0/24`
    - **Output**: Service banners and OS details, potentially identifying Android or iOS devices.
    - **Use Case**: Detect mobile devices running specific services (e.g., SSH, HTTP) that could be targeted.

- **Traffic Analysis**:
  - **Purpose**: Capture and analyze network traffic from mobile devices.
  - **Command**: `wireshark -i eth0`
    - **Example**: `wireshark -i eth0`
    - **Output**: Packet capture interface showing traffic from mobile devices, including HTTP or VPN data.
    - **Use Case**: Identify unencrypted traffic or sensitive data transmitted by mobile devices.

**Why It Matters**: Mobile devices often have unique security configurations (e.g., weaker Wi-Fi passwords, outdated Bluetooth protocols) and may connect to corporate networks via VPNs or Wi-Fi, making them critical targets for network pentesting. Testing these connections can reveal vulnerabilities that affect the broader network.

**Documentation**: [Kali Linux Wireless Tools](https://www.kali.org/tools/), [BlueZ Documentation](http://www.bluez.org/)

## Documenting Findings

Proper documentation is crucial for reporting findings to clients. Use these tools to organize results:

| **Tool** | **Purpose** | **Example** | **Expected Output** |
|----------|-------------|-------------|---------------------|
| `keepnote` | Note-taking application for organizing findings. | `keepnote` | GUI for creating and organizing notes. |
| `nano findings.txt` | Quick note-taking with a text editor. | `nano findings.txt` | Text file for storing findings. |

**Tips for Documentation**:
- Organize findings by category (e.g., vulnerabilities, misconfigurations, mobile-specific issues).
- Include screenshots or logs as evidence (e.g., `nmap` output, `wireshark` captures).
- Prioritize high-impact issues, such as exposed mobile device services or weak Wi-Fi encryption.
- Use clear headings and bullet points for readability.

## Best Practices

- **Legal Authorization**: Obtain explicit written permission (e.g., a signed contract) before conducting any scans or tests. Unauthorized testing is illegal and can lead to severe consequences.
- **Stealth**: Use stealthy scanning options (e.g., `-sS` for SYN scans, `-T2` for slower timing) to minimize detection by intrusion detection systems.
- **Segment Scans**: Divide large networks into smaller subnets to manage scan times and reduce network impact.
- **Verify Findings**: Use multiple tools (e.g., `nmap` and `masscan`) to confirm vulnerabilities for accuracy.
- **Prioritize Issues**: Focus on high-impact vulnerabilities, such as exposed mobile device services or weak AD permissions.
- **Maintain Anonymity**: Use VPNs or Tor during external reconnaissance (if permitted) to mask your IP address.
- **Ethical Conduct**: Respect privacy laws and avoid accessing sensitive data without authorization.
- **Mobile Considerations**: Pay special attention to mobile devices, which may use weaker security protocols (e.g., outdated Wi-Fi encryption) or expose sensitive data via Bluetooth.

## Example Workflow

### External Reconnaissance
1. **Gather Domain Info**: Use `whois example.com` and `dnsenum example.com` to collect domain and DNS details.
2. **Public Data Collection**: Run `theharvester -d example.com -b all` or `shodan host 192.168.1.100` to identify exposed assets, including mobile devices.
3. **Host Discovery**: Perform a ping sweep with `nmap -sn 192.168.1.0/24` to find live hosts.
4. **Port and Service Scanning**: Use `nmap -sV -O 192.168.1.100` to identify services and OS on specific hosts.
5. **Service Enumeration**: Run `enum4linux -a 192.168.1.100` for SMB or `gobuster dir -u http://192.168.1.100` for web servers.
6. **Vulnerability Scanning**: Use `nikto -h http://192.168.1.100` or `nmap --script vuln 192.168.1.100` to identify vulnerabilities.

### Internal Reconnaissance
1. **Device Discovery**: Run `arp-scan --interface=eth0 192.168.1.0/24` to identify devices, including mobile devices on Wi-Fi.
2. **Traffic Analysis**: Use `wireshark -i eth0` to capture and analyze network traffic, focusing on mobile device activity.
3. **Service Enumeration**: Check SMB shares with `smbmap -H 192.168.1.100 -u username -p password`.
4. **Active Directory Reconnaissance**: If AD is present, use `bloodhound-ce-python` to map attack paths.
5. **Vulnerability Scanning**: Launch `openvas-start` for a comprehensive vulnerability scan.

### Mobile Network Reconnaissance
1. **Wi-Fi Discovery**: Use `airodump-ng wlan0` to identify Wi-Fi networks used by mobile devices.
2. **Bluetooth Scanning**: Run `hcitool scan` to detect Bluetooth-enabled mobile devices.
3. **Device Fingerprinting**: Use `nmap -sV --script=banner 192.168.1.0/24` to identify mobile devices on the network.
4. **Traffic Analysis**: Capture mobile device traffic with `wireshark -i eth0` to identify unencrypted data.

**Scenario Example**: Suppose you’re pentesting ExampleCorp’s network. Externally, you use `theharvester` to find subdomains and `nmap` to identify a web server on 192.168.1.100. Internally, you discover mobile devices on the Wi-Fi network using `airodump-ng` and identify a vulnerable Bluetooth device with `hcitool scan`. You document all findings in `keepnote`, prioritizing weak Wi-Fi encryption and exposed AD permissions.

## Citations
- [Kali Linux Official Tools](https://www.kali.org/tools/)
- [BloodHound CE Documentation](https://bloodhound.readthedocs.io/en/latest/installation/linux.html)
- [Shodan CLI Documentation](https://developer.shodan.io/api)
- [Recon-ng Documentation](https://bitbucket.org/LaNMaSteR53/recon-ng/wiki/Home)
- [Nmap Documentation](https://nmap.org/book/man.html)
- [Wireshark User's Guide](https://www.wireshark.org/docs/wsug_html_chunked/)
- [BlueZ Documentation](http://www.bluez.org/)

- pk
