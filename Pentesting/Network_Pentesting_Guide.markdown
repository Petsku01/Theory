# Kali Linux Commands for Network Reconnaissance

This comprehensive guide outlines the Kali Linux commands and tools for mapping a companyâ€™s network structure during penetration testing. It covers both external (outside the network) and internal (inside the network) reconnaissance, providing detailed instructions for each phase. The guide is structured to help pentesters systematically gather information about network architecture, devices, and services. **Always obtain explicit written permission before performing any penetration testing activities, as unauthorized testing is illegal and unethical.**

## Table of Contents
1. [External Network Reconnaissance](#external-network-reconnaissance)
   - [Domain and DNS Information](#domain-and-dns-information)
   - [Network Scanning](#network-scanning)
   - [Service Enumeration](#service-enumeration)
   - [Advanced Scanning Techniques](#advanced-scanning-techniques)
2. [Internal Network Reconnaissance](#internal-network-reconnaissance)
   - [Host Discovery](#host-discovery)
   - [Network Traffic Analysis](#network-traffic-analysis)
   - [Service Enumeration (Internal)](#service-enumeration-internal)
   - [Active Directory Reconnaissance with BloodHound CE](#active-directory-reconnaissance-with-bloodhound-ce)
3. [General Network Commands](#general-network-commands)
4. [Vulnerability Scanning](#vulnerability-scanning)
5. [Wireless Network Reconnaissance](#wireless-network-reconnaissance)
6. [Automotive Hacking with CARsenal](#automotive-hacking-with-carsenal)
7. [Best Practices](#best-practices)
8. [Example Workflow](#example-workflow)
9. [Citations](#citations)

## External Network Reconnaissance

External reconnaissance involves gathering information about the target network from outside its perimeter. This includes passive methods (no direct interaction) and active methods (direct scanning, with permission).

### Domain and DNS Information
These tools help identify domain details, subdomains, and associated hosts without directly interacting with the target network.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `whois example.com` | Retrieves domain registration details (registrar, name servers, contact info). | `whois example.com` |
| `dnsenum example.com` | Discovers DNS records (MX, NS, A) to identify hosts and subdomains. | `dnsenum example.com` |
| `theharvester -d example.com -b all` | Collects emails, subdomains, and hosts from public sources (Google, Bing, etc.). | `theharvester -d example.com -b all` |
| `dig example.com` | Queries DNS servers for domain information (e.g., A, MX, NS records). | `dig example.com ANY` |

### Network Scanning
Active scanning identifies live hosts, open ports, and running services. Ensure you have permission, as these actions are detectable.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `nmap -sn 192.168.1.0/24` | Performs a ping sweep to identify live hosts on a network. | `nmap -sn 192.168.1.0/24` |
| `nmap -sS -p- 192.168.1.100` | Conducts a stealth SYN scan to find open ports on a host. | `nmap -sS -p- 192.168.1.100` |
| `nmap -sV -O 192.168.1.100` | Identifies service versions and operating systems. | `nmap -sV -O 192.168.1.100` |
| `nmap -A 192.168.1.100` | Performs an aggressive scan, including OS detection, service enumeration, and NSE scripts. | `nmap -A 192.168.1.100` |
| `masscan 192.168.1.0/24 -p1-65535 --rate=1000` | Fast port scanning for large networks. | `masscan 192.168.1.0/24 -p1-65535 --rate=1000` |

### Service Enumeration
Once hosts and ports are identified, enumerate services to understand their configurations and potential vulnerabilities.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `enum4linux -a 192.168.1.100` | Extracts user accounts, shares, and policies from SMB services. | `enum4linux -a 192.168.1.100` |
| `snmpwalk -v2c -c public 192.168.1.100` | Retrieves device info if SNMP is enabled with default community strings. | `snmpwalk -v2c -c public 192.168.1.100` |
| `ftp 192.168.1.100` | Attempts anonymous FTP login to check for accessible files. | `ftp 192.168.1.100` |
| `gobuster dir -u http://192.168.1.100 -w /usr/share/wordlists/dirb/common.txt` | Finds hidden directories and files on web servers. | `gobuster dir -u http://192.168.1.100 -w /usr/share/wordlists/dirb/common.txt` |
| `nikto -h http://192.168.1.100` | Scans for web server vulnerabilities. | `nikto -h http://192.168.1.100` |

### Advanced Scanning Techniques
These techniques help bypass firewalls or reduce detectability.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `sudo nmap -sF 192.168.8.100` | Stealth FIN scan to detect closed ports. | `sudo nmap -sF 192.168.8.100` |
| `sudo nmap -sA 192.168.8.100` | ACK scan to detect firewall rules. | `sudo nmap -sA 192.168.8.100` |
| `sudo nmap -sU 192.168.8.100` | Scans for open UDP ports. | `sudo nmap -sU 192.168.8.100` |
| `sudo nmap -sS -S 10.0.0.1 -e eth0 192.168.8.100` | SYN scan with spoofed source IP for anonymity. | `sudo nmap -sS -S 10.0.0.1 -e eth0 192.168.8.100` |
| `nc -v 192.168.10.1 5500` | Tests if a specific port is open using netcat. | `nc -v 192.168.10.1 5500` |

## Internal Network Reconnaissance

Internal reconnaissance is performed when you have access to the network (e.g., via VPN or physical access). The goal is to map devices, analyze traffic, and enumerate internal services.

### Host Discovery
Identify devices on the local network.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `arp-scan --interface=eth0 192.168.1.0/24` | Discovers devices using ARP requests. | `arp-scan --interface=eth0 192.168.1.0/24` |
| `nmap -sn 192.168.1.0/24` | Identifies live hosts on the internal network. | `nmap -sn 192.168.1.0/24` |

### Network Traffic Analysis
Analyze network traffic to understand communication patterns.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `wireshark &` | Captures and analyzes network packets. | `wireshark &` |
| `tcpdump -i eth0` | Captures packets on a specific interface. | `tcpdump -i eth0` |
| `ettercap -T -i eth0` | Performs man-in-the-middle attacks to intercept traffic. | `ettercap -T -i eth0` |

### Service Enumeration (Internal)
Enumerate services to identify configurations and potential vulnerabilities.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `smbmap -H 192.168.1.100 -u username -p password` | Enumerates SMB shares and checks permissions. | `smbmap -H 192.168.1.100 -u username -p password` |
| `sslsplit` | Conducts MITM attacks on SSL/TLS connections (requires setup). | Refer to Kali documentation for usage. |

### Active Directory Reconnaissance with BloodHound CE
BloodHound CE is a powerful tool for mapping and analyzing Active Directory environments. It uses graph theory to reveal hidden relationships between AD objects (e.g., users, groups, computers, permissions), helping identify potential attack paths.

- **Installation**:
  - On Kali Linux, BloodHound CE is pre-installed. Run the setup script to initialize services:
    ```bash
    sudo bloodhound-setup
    ```
  - This initializes PostgreSQL and Neo4j services, setting up the necessary configurations.

- **Usage**:
  1. **Collect Data**: Use the Python-based ingestor for BloodHound CE:
     ```bash
     bloodhound-ce-python -u username -p password -d domain
     ```
     Replace `username`, `password`, and `domain` with valid Active Directory credentials. This collects data on AD objects and relationships.
  2. **Import Data**: Access BloodHound via your browser at `http://localhost:7474` and import the collected data (usually in JSON or ZIP format).
  3. **Analyze**: Use the BloodHound interface to visualize AD relationships and identify attack paths, such as overly permissive permissions or misconfigurations.

- **Why Use It?**: BloodHound CE is essential for internal network testing in environments with Active Directory, as it highlights vulnerabilities that could be exploited by attackers.

- **Documentation**: [BloodHound CE Documentation](https://bloodhound.readthedocs.io/en/latest/installation/linux.html)

## General Network Commands

These commands are useful for both external and internal reconnaissance, providing foundational network information.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `ifconfig` | Displays network interface information (IP, MAC, etc.). | `ifconfig` |
| `ip addr show` | Shows IP addresses and network configuration. | `ip addr show` |
| `ping -c 4 example.com` | Tests connectivity to a remote host. | `ping -c 4 example.com` |
| `netstat -an` | Shows active connections and listening ports. | `netstat -an` |
| `traceroute example.com` | Traces the route to a destination. | `traceroute example.com` |
| `arp -a` | Displays the ARP table. | `arp -a` |
| `dig example.com` | Queries DNS servers for domain information. | `dig example.com` |
| `wget http://192.168.1.100` | Downloads files from a server. | `wget http://192.168.1.100` |

## Vulnerability Scanning

Identify potential vulnerabilities in the network.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `openvas-start` | Launches OpenVAS for comprehensive vulnerability scanning. | `openvas-start` |
| `nmap --script vuln 192.168.1.100` | Runs vulnerability-specific NSE scripts. | `nmap --script vuln 192.168.1.100` |

## Wireless Network Reconnaissance

If the company uses Wi-Fi, these tools help map wireless networks.

| **Command** | **Purpose** | **Example** |
|-------------|-------------|-------------|
| `airodump-ng wlan0` | Captures wireless traffic and lists nearby networks (requires monitor mode). | `airodump-ng wlan0` |
| `airgeddon` | Automated wireless auditing tool with a menu-driven interface. | `airgeddon` |

## Automotive Hacking with CARsenal

CARsenal is a toolset for automotive hacking, useful for testing connected vehicles or IoT devices in automotive environments. Key tools include:

- **hlcand**: A modified slcand for use with ELM327 (a common OBD-II adapter).
- **VIN Info**: Decodes Vehicle Identification Numbers (VINs) for vehicle identification.
- **CaringCaribou**: Provides modules for listening, dumping, fuzzing, sending, UDS (Unified Diagnostic Services), and XCP (eXtreme Control Protocol).
- **ICSim**: A simulator for testing CARsenal tools without requiring physical hardware.

- **Why Use It?**: CARsenal is valuable for pentesters working on automotive or IoT security assessments, particularly for connected vehicles.

- **Documentation**: [Kali NetHunter CARsenal](https://www.kali.org/docs/nethunter/nethunter-canarsenal/)

## Best Practices

- **Legal Authorization**: Obtain explicit written permission (e.g., a signed contract) before conducting any scans or tests. Unauthorized testing is illegal and can lead to severe consequences.
- **Stealth**: Use stealthy scanning options (e.g., `-sS` for SYN scans, `-T2` or `-T1` for slower timing) to minimize detection by intrusion detection systems.
- **Logging**: Save scan results for analysis and reporting. Example: `nmap -oX output.xml 192.168.1.100` exports results to XML for use in tools like Metasploit.
- **Scope Confirmation**: Verify the IP range or subnet you are authorized to scan to avoid targeting unintended systems.
- **Tool Integration**: Combine tools for comprehensive results. For example, use Nmap to identify hosts, then feed results into BloodHound CE or enum4linux for further enumeration.
- **Leverage Specialized Tools**: Use BloodHound CE for Active Directory environments and CARsenal for automotive security testing when applicable.
- **Documentation**: Document all findings meticulously for reporting to the client.

## Example Workflow

### External Reconnaissance
1. **Gather Domain Info**: Use `whois example.com` and `dnsenum example.com` to collect domain and DNS details.
2. **Public Data Collection**: Run `theharvester -d example.com -b all` to gather emails and subdomains.
3. **Host Discovery**: Perform a ping sweep with `nmap -sn 192.168.1.0/24` to find live hosts.
4. **Port and Service Scanning**: Use `nmap -sV -O 192.168.1.100` to identify services and OS on specific hosts.
5. **Service Enumeration**: Run `enum4linux -a 192.168.1.100` for SMB or `gobuster dir -u http://192.168.1.100` for web servers.
6. **Vulnerability Scanning**: Use `nikto -h http://192.168.1.100` or `nmap --script vuln 192.168.1.100` to identify vulnerabilities.

### Internal Reconnaissance
1. **Device Discovery**: Run `arp-scan --interface=eth0 192.168.1.0/24` to identify devices on the local network.
2. **Traffic Analysis**: Use `wireshark &` or `tcpdump -i eth0` to capture and analyze network traffic.
3. **Service Enumeration**: Check SMB shares with `smbmap -H 192.168.1.100 -u username -p password`.
4. **Active Directory Reconnaissance**: If Active Directory is present, use BloodHound CE to map attack paths.
5. **Vulnerability Scanning**: Launch `openvas-start` for a comprehensive vulnerability scan.

### Specialized Testing
- For automotive or IoT security, use CARsenal to test connected vehicles or devices.

## Citations
- [Kali Linux Official Tools](https://www.kali.org/tools/)
- [BloodHound CE Documentation](https://bloodhound.readthedocs.io/en/latest/installation/linux.html)
- [Kali NetHunter CARsenal](https://www.kali.org/docs/nethunter/nethunter-canarsenal/)
- [StationX: Top 25 Penetration Testing Tools](https://www.stationx.net/penetration-testing-tools-for-kali-linux/)
- [Infosec Institute: Top 19 Kali Linux Tools](https://www.infosecinstitute.com/resources/penetration-testing/top-19-kali-linux-tools-for-vulnerability-assessments/)
- [Cyber Samir: Top 25 Penetration Testing Tools](https://cybersamir.com/top-25-penetration-testing-tools-in-kali-linux-for-2025/)